/**
 * Selling Partner API for Services
 * With the Services API, you can build applications that help service providers get and modify their service orders.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import AddAppointmentRequest from '../models/AddAppointmentRequest';
import CancelServiceJobByServiceJobIdResponse from '../models/CancelServiceJobByServiceJobIdResponse';
import CompleteServiceJobByServiceJobIdResponse from '../models/CompleteServiceJobByServiceJobIdResponse';
import GetServiceJobByServiceJobIdResponse from '../models/GetServiceJobByServiceJobIdResponse';
import GetServiceJobsResponse from '../models/GetServiceJobsResponse';
import RescheduleAppointmentRequest from '../models/RescheduleAppointmentRequest';
import SetAppointmentResponse from '../models/SetAppointmentResponse';

/**
* Service service.
* @module client/apis/ServiceApi
* @version v1
*/
export default class ServiceApi {

    /**
    * Constructs a new ServiceApi. 
    * @alias module:client/apis/ServiceApi
    * @class
    * @param {module:client/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:client/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addAppointmentForServiceJobByServiceJobId operation.
     * @callback module:client/apis/ServiceApi~addAppointmentForServiceJobByServiceJobIdCallback
     * @param {String} error Error message, if any.
     * @param {module:client/models/SetAppointmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds an appointment to the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     * @param {module:client/apis/ServiceApi~addAppointmentForServiceJobByServiceJobIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:client/models/SetAppointmentResponse}
     */
    addAppointmentForServiceJobByServiceJobId(body, serviceJobId, callback) {
      let postBody = body;

      let pathParams = {
        'serviceJobId': serviceJobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SetAppointmentResponse;

      return this.apiClient.callApi(
        '/service/v1/serviceJobs/{serviceJobId}/appointments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the cancelServiceJobByServiceJobId operation.
     * @callback module:client/apis/ServiceApi~cancelServiceJobByServiceJobIdCallback
     * @param {String} error Error message, if any.
     * @param {module:client/models/CancelServiceJobByServiceJobIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     * @param {module:client/apis/ServiceApi~cancelServiceJobByServiceJobIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:client/models/CancelServiceJobByServiceJobIdResponse}
     */
    cancelServiceJobByServiceJobId(serviceJobId, cancellationReasonCode, callback) {
      let postBody = null;

      let pathParams = {
        'serviceJobId': serviceJobId
      };
      let queryParams = {
        'cancellationReasonCode': cancellationReasonCode
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CancelServiceJobByServiceJobIdResponse;

      return this.apiClient.callApi(
        '/service/v1/serviceJobs/{serviceJobId}/cancellations', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the completeServiceJobByServiceJobId operation.
     * @callback module:client/apis/ServiceApi~completeServiceJobByServiceJobIdCallback
     * @param {String} error Error message, if any.
     * @param {module:client/models/CompleteServiceJobByServiceJobIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Completes the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     * @param {module:client/apis/ServiceApi~completeServiceJobByServiceJobIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:client/models/CompleteServiceJobByServiceJobIdResponse}
     */
    completeServiceJobByServiceJobId(serviceJobId, callback) {
      let postBody = null;

      let pathParams = {
        'serviceJobId': serviceJobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CompleteServiceJobByServiceJobIdResponse;

      return this.apiClient.callApi(
        '/service/v1/serviceJobs/{serviceJobId}/completions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getServiceJobByServiceJobId operation.
     * @callback module:client/apis/ServiceApi~getServiceJobByServiceJobIdCallback
     * @param {String} error Error message, if any.
     * @param {module:client/models/GetServiceJobByServiceJobIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets service job details for the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     * @param {module:client/apis/ServiceApi~getServiceJobByServiceJobIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:client/models/GetServiceJobByServiceJobIdResponse}
     */
    getServiceJobByServiceJobId(serviceJobId, callback) {
      let postBody = null;

      let pathParams = {
        'serviceJobId': serviceJobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetServiceJobByServiceJobIdResponse;

      return this.apiClient.callApi(
        '/service/v1/serviceJobs/{serviceJobId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getServiceJobs operation.
     * @callback module:client/apis/ServiceApi~getServiceJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:client/models/GetServiceJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets service job details for the specified filter query.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     * @param {Object} opts Optional parameters
     * @param {module:client/apis/ServiceApi~getServiceJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:client/models/GetServiceJobsResponse}
     */
    getServiceJobs(marketplaceIds, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'serviceOrderIds': this.apiClient.buildCollectionParam(opts['serviceOrderIds'], 'csv'),
        'serviceJobStatus': this.apiClient.buildCollectionParam(opts['serviceJobStatus'], 'csv'),
        'pageToken': opts['pageToken'],
        'pageSize': opts['pageSize'],
        'sortField': opts['sortField'],
        'sortOrder': opts['sortOrder'],
        'createdAfter': opts['createdAfter'],
        'createdBefore': opts['createdBefore'],
        'lastUpdatedAfter': opts['lastUpdatedAfter'],
        'lastUpdatedBefore': opts['lastUpdatedBefore'],
        'scheduleStartDate': opts['scheduleStartDate'],
        'scheduleEndDate': opts['scheduleEndDate'],
        'marketplaceIds': this.apiClient.buildCollectionParam(marketplaceIds, 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetServiceJobsResponse;

      return this.apiClient.callApi(
        '/service/v1/serviceJobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the rescheduleAppointmentForServiceJobByServiceJobId operation.
     * @callback module:client/apis/ServiceApi~rescheduleAppointmentForServiceJobByServiceJobIdCallback
     * @param {String} error Error message, if any.
     * @param {module:client/models/SetAppointmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reschedules an appointment for the service job indicated by the service job identifier you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     * @param {module:client/apis/ServiceApi~rescheduleAppointmentForServiceJobByServiceJobIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:client/models/SetAppointmentResponse}
     */
    rescheduleAppointmentForServiceJobByServiceJobId(body, serviceJobId, appointmentId, callback) {
      let postBody = body;

      let pathParams = {
        'serviceJobId': serviceJobId,
        'appointmentId': appointmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SetAppointmentResponse;

      return this.apiClient.callApi(
        '/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
