/**
 * Selling Partner API for Finances
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Currency from './Currency';
import ModelDate from './ModelDate';

/**
* The SolutionProviderCreditEvent model module.
* @module client/models/SolutionProviderCreditEvent
* @version v0
*/
export default class SolutionProviderCreditEvent {
    /**
    * Constructs a new <code>SolutionProviderCreditEvent</code>.
    * A credit given to a solution provider.
    * @alias module:client/models/SolutionProviderCreditEvent
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>SolutionProviderCreditEvent</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:client/models/SolutionProviderCreditEvent} obj Optional instance to populate.
    * @return {module:client/models/SolutionProviderCreditEvent} The populated <code>SolutionProviderCreditEvent</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SolutionProviderCreditEvent();
                        
            
            if (data.hasOwnProperty('ProviderTransactionType')) {
                obj['ProviderTransactionType'] = ApiClient.convertToType(data['ProviderTransactionType'], 'String');
            }
            if (data.hasOwnProperty('SellerOrderId')) {
                obj['SellerOrderId'] = ApiClient.convertToType(data['SellerOrderId'], 'String');
            }
            if (data.hasOwnProperty('MarketplaceId')) {
                obj['MarketplaceId'] = ApiClient.convertToType(data['MarketplaceId'], 'String');
            }
            if (data.hasOwnProperty('MarketplaceCountryCode')) {
                obj['MarketplaceCountryCode'] = ApiClient.convertToType(data['MarketplaceCountryCode'], 'String');
            }
            if (data.hasOwnProperty('SellerId')) {
                obj['SellerId'] = ApiClient.convertToType(data['SellerId'], 'String');
            }
            if (data.hasOwnProperty('SellerStoreName')) {
                obj['SellerStoreName'] = ApiClient.convertToType(data['SellerStoreName'], 'String');
            }
            if (data.hasOwnProperty('ProviderId')) {
                obj['ProviderId'] = ApiClient.convertToType(data['ProviderId'], 'String');
            }
            if (data.hasOwnProperty('ProviderStoreName')) {
                obj['ProviderStoreName'] = ApiClient.convertToType(data['ProviderStoreName'], 'String');
            }
            if (data.hasOwnProperty('TransactionAmount')) {
                obj['TransactionAmount'] = Currency.constructFromObject(data['TransactionAmount']);
            }
            if (data.hasOwnProperty('TransactionCreationDate')) {
                obj['TransactionCreationDate'] = ModelDate.constructFromObject(data['TransactionCreationDate']);
            }
        }
        return obj;
    }

    /**
    * The transaction type.
    * @member {String} ProviderTransactionType
    */
    'ProviderTransactionType' = undefined;
    /**
    * A seller-defined identifier for an order.
    * @member {String} SellerOrderId
    */
    'SellerOrderId' = undefined;
    /**
    * The identifier of the marketplace where the order was placed.
    * @member {String} MarketplaceId
    */
    'MarketplaceId' = undefined;
    /**
    * The two-letter country code of the country associated with the marketplace where the order was placed.
    * @member {String} MarketplaceCountryCode
    */
    'MarketplaceCountryCode' = undefined;
    /**
    * The Amazon-defined identifier of the seller.
    * @member {String} SellerId
    */
    'SellerId' = undefined;
    /**
    * The store name where the payment event occurred.
    * @member {String} SellerStoreName
    */
    'SellerStoreName' = undefined;
    /**
    * The Amazon-defined identifier of the solution provider.
    * @member {String} ProviderId
    */
    'ProviderId' = undefined;
    /**
    * The store name where the payment event occurred.
    * @member {String} ProviderStoreName
    */
    'ProviderStoreName' = undefined;
    /**
    * @member {module:client/models/Currency} TransactionAmount
    */
    'TransactionAmount' = undefined;
    /**
    * @member {module:client/models/ModelDate} TransactionCreationDate
    */
    'TransactionCreationDate' = undefined;




}
