/**
 * Selling Partner API for Catalog Items
 * The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DecimalWithUnits from './DecimalWithUnits';
import DimensionType from './DimensionType';

/**
* The RelationshipType model module.
* @module client/models/RelationshipType
* @version v0
*/
export default class RelationshipType {
    /**
    * Constructs a new <code>RelationshipType</code>.
    * Specific variations of the item.
    * @alias module:client/models/RelationshipType
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>RelationshipType</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:client/models/RelationshipType} obj Optional instance to populate.
    * @return {module:client/models/RelationshipType} The populated <code>RelationshipType</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RelationshipType();
                        
            
            if (data.hasOwnProperty('Color')) {
                obj['Color'] = ApiClient.convertToType(data['Color'], 'String');
            }
            if (data.hasOwnProperty('Edition')) {
                obj['Edition'] = ApiClient.convertToType(data['Edition'], 'String');
            }
            if (data.hasOwnProperty('Flavor')) {
                obj['Flavor'] = ApiClient.convertToType(data['Flavor'], 'String');
            }
            if (data.hasOwnProperty('GemType')) {
                obj['GemType'] = ApiClient.convertToType(data['GemType'], ['String']);
            }
            if (data.hasOwnProperty('GolfClubFlex')) {
                obj['GolfClubFlex'] = ApiClient.convertToType(data['GolfClubFlex'], 'String');
            }
            if (data.hasOwnProperty('HandOrientation')) {
                obj['HandOrientation'] = ApiClient.convertToType(data['HandOrientation'], 'String');
            }
            if (data.hasOwnProperty('HardwarePlatform')) {
                obj['HardwarePlatform'] = ApiClient.convertToType(data['HardwarePlatform'], 'String');
            }
            if (data.hasOwnProperty('MaterialType')) {
                obj['MaterialType'] = ApiClient.convertToType(data['MaterialType'], ['String']);
            }
            if (data.hasOwnProperty('MetalType')) {
                obj['MetalType'] = ApiClient.convertToType(data['MetalType'], 'String');
            }
            if (data.hasOwnProperty('Model')) {
                obj['Model'] = ApiClient.convertToType(data['Model'], 'String');
            }
            if (data.hasOwnProperty('OperatingSystem')) {
                obj['OperatingSystem'] = ApiClient.convertToType(data['OperatingSystem'], ['String']);
            }
            if (data.hasOwnProperty('ProductTypeSubcategory')) {
                obj['ProductTypeSubcategory'] = ApiClient.convertToType(data['ProductTypeSubcategory'], 'String');
            }
            if (data.hasOwnProperty('RingSize')) {
                obj['RingSize'] = ApiClient.convertToType(data['RingSize'], 'String');
            }
            if (data.hasOwnProperty('ShaftMaterial')) {
                obj['ShaftMaterial'] = ApiClient.convertToType(data['ShaftMaterial'], 'String');
            }
            if (data.hasOwnProperty('Scent')) {
                obj['Scent'] = ApiClient.convertToType(data['Scent'], 'String');
            }
            if (data.hasOwnProperty('Size')) {
                obj['Size'] = ApiClient.convertToType(data['Size'], 'String');
            }
            if (data.hasOwnProperty('SizePerPearl')) {
                obj['SizePerPearl'] = ApiClient.convertToType(data['SizePerPearl'], 'String');
            }
            if (data.hasOwnProperty('GolfClubLoft')) {
                obj['GolfClubLoft'] = DecimalWithUnits.constructFromObject(data['GolfClubLoft']);
            }
            if (data.hasOwnProperty('TotalDiamondWeight')) {
                obj['TotalDiamondWeight'] = DecimalWithUnits.constructFromObject(data['TotalDiamondWeight']);
            }
            if (data.hasOwnProperty('TotalGemWeight')) {
                obj['TotalGemWeight'] = DecimalWithUnits.constructFromObject(data['TotalGemWeight']);
            }
            if (data.hasOwnProperty('PackageQuantity')) {
                obj['PackageQuantity'] = ApiClient.convertToType(data['PackageQuantity'], 'Number');
            }
            if (data.hasOwnProperty('ItemDimensions')) {
                obj['ItemDimensions'] = DimensionType.constructFromObject(data['ItemDimensions']);
            }
        }
        return obj;
    }

    /**
    * The color variation of the item.
    * @member {String} Color
    */
    'Color' = undefined;
    /**
    * The edition variation of the item.
    * @member {String} Edition
    */
    'Edition' = undefined;
    /**
    * The flavor variation of the item.
    * @member {String} Flavor
    */
    'Flavor' = undefined;
    /**
    * The gem type variations of the item.
    * @member {Array.<String>} GemType
    */
    'GemType' = undefined;
    /**
    * The golf club flex variation of an item.
    * @member {String} GolfClubFlex
    */
    'GolfClubFlex' = undefined;
    /**
    * The hand orientation variation of an item.
    * @member {String} HandOrientation
    */
    'HandOrientation' = undefined;
    /**
    * The hardware platform variation of an item.
    * @member {String} HardwarePlatform
    */
    'HardwarePlatform' = undefined;
    /**
    * The material type variations of an item.
    * @member {Array.<String>} MaterialType
    */
    'MaterialType' = undefined;
    /**
    * The metal type variation of an item.
    * @member {String} MetalType
    */
    'MetalType' = undefined;
    /**
    * The model variation of an item.
    * @member {String} Model
    */
    'Model' = undefined;
    /**
    * The operating system variations of an item.
    * @member {Array.<String>} OperatingSystem
    */
    'OperatingSystem' = undefined;
    /**
    * The product type subcategory variation of an item.
    * @member {String} ProductTypeSubcategory
    */
    'ProductTypeSubcategory' = undefined;
    /**
    * The ring size variation of an item.
    * @member {String} RingSize
    */
    'RingSize' = undefined;
    /**
    * The shaft material variation of an item.
    * @member {String} ShaftMaterial
    */
    'ShaftMaterial' = undefined;
    /**
    * The scent variation of an item.
    * @member {String} Scent
    */
    'Scent' = undefined;
    /**
    * The size variation of an item.
    * @member {String} Size
    */
    'Size' = undefined;
    /**
    * The size per pearl variation of an item.
    * @member {String} SizePerPearl
    */
    'SizePerPearl' = undefined;
    /**
    * @member {module:client/models/DecimalWithUnits} GolfClubLoft
    */
    'GolfClubLoft' = undefined;
    /**
    * @member {module:client/models/DecimalWithUnits} TotalDiamondWeight
    */
    'TotalDiamondWeight' = undefined;
    /**
    * @member {module:client/models/DecimalWithUnits} TotalGemWeight
    */
    'TotalGemWeight' = undefined;
    /**
    * The package quantity variation of an item.
    * @member {Number} PackageQuantity
    */
    'PackageQuantity' = undefined;
    /**
    * @member {module:client/models/DimensionType} ItemDimensions
    */
    'ItemDimensions' = undefined;




}
