/**
 * Selling Partner API for Reports
 * The Selling Partner API for Reports lets you retrieve and manage a variety of reports that can help selling partners manage their businesses.
 *
 * OpenAPI spec version: 2020-09-04
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
* The Report model module.
* @module client/models/Report
* @version 2020-09-04
*/
export default class Report {
    /**
    * Constructs a new <code>Report</code>.
    * @alias module:client/models/Report
    * @class
    * @param reportId {String} The identifier for the report. This identifier is unique only in combination with a seller ID.
    * @param reportType {String} The report type.
    * @param createdTime {Date} The date and time when the report was created.
    * @param processingStatus {module:client/models/Report.ProcessingStatusEnum} The processing status of the report.
    */

    constructor(reportId, reportType, createdTime, processingStatus) {
        
        
        this['reportId'] = reportId;
        this['reportType'] = reportType;
        this['createdTime'] = createdTime;
        this['processingStatus'] = processingStatus;
        
    }

    /**
    * Constructs a <code>Report</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:client/models/Report} obj Optional instance to populate.
    * @return {module:client/models/Report} The populated <code>Report</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Report();
                        
            
            if (data.hasOwnProperty('marketplaceIds')) {
                obj['marketplaceIds'] = ApiClient.convertToType(data['marketplaceIds'], ['String']);
            }
            if (data.hasOwnProperty('reportId')) {
                obj['reportId'] = ApiClient.convertToType(data['reportId'], 'String');
            }
            if (data.hasOwnProperty('reportType')) {
                obj['reportType'] = ApiClient.convertToType(data['reportType'], 'String');
            }
            if (data.hasOwnProperty('dataStartTime')) {
                obj['dataStartTime'] = ApiClient.convertToType(data['dataStartTime'], 'Date');
            }
            if (data.hasOwnProperty('dataEndTime')) {
                obj['dataEndTime'] = ApiClient.convertToType(data['dataEndTime'], 'Date');
            }
            if (data.hasOwnProperty('reportScheduleId')) {
                obj['reportScheduleId'] = ApiClient.convertToType(data['reportScheduleId'], 'String');
            }
            if (data.hasOwnProperty('createdTime')) {
                obj['createdTime'] = ApiClient.convertToType(data['createdTime'], 'Date');
            }
            if (data.hasOwnProperty('processingStatus')) {
                obj['processingStatus'] = ApiClient.convertToType(data['processingStatus'], 'String');
            }
            if (data.hasOwnProperty('processingStartTime')) {
                obj['processingStartTime'] = ApiClient.convertToType(data['processingStartTime'], 'Date');
            }
            if (data.hasOwnProperty('processingEndTime')) {
                obj['processingEndTime'] = ApiClient.convertToType(data['processingEndTime'], 'Date');
            }
            if (data.hasOwnProperty('reportDocumentId')) {
                obj['reportDocumentId'] = ApiClient.convertToType(data['reportDocumentId'], 'String');
            }
        }
        return obj;
    }

    /**
    * A list of marketplace identifiers for the report.
    * @member {Array.<String>} marketplaceIds
    */
    'marketplaceIds' = undefined;
    /**
    * The identifier for the report. This identifier is unique only in combination with a seller ID.
    * @member {String} reportId
    */
    'reportId' = undefined;
    /**
    * The report type.
    * @member {String} reportType
    */
    'reportType' = undefined;
    /**
    * The start of a date and time range used for selecting the data to report.
    * @member {Date} dataStartTime
    */
    'dataStartTime' = undefined;
    /**
    * The end of a date and time range used for selecting the data to report.
    * @member {Date} dataEndTime
    */
    'dataEndTime' = undefined;
    /**
    * The identifier of the report schedule that created this report (if any). This identifier is unique only in combination with a seller ID.
    * @member {String} reportScheduleId
    */
    'reportScheduleId' = undefined;
    /**
    * The date and time when the report was created.
    * @member {Date} createdTime
    */
    'createdTime' = undefined;
    /**
    * The processing status of the report.
    * @member {module:client/models/Report.ProcessingStatusEnum} processingStatus
    */
    'processingStatus' = undefined;
    /**
    * The date and time when the report processing started, in ISO 8601 date time format.
    * @member {Date} processingStartTime
    */
    'processingStartTime' = undefined;
    /**
    * The date and time when the report processing completed, in ISO 8601 date time format.
    * @member {Date} processingEndTime
    */
    'processingEndTime' = undefined;
    /**
    * The identifier for the report document. Pass this into the getReportDocument operation to get the information you will need to retrieve and decrypt the report document's contents.
    * @member {String} reportDocumentId
    */
    'reportDocumentId' = undefined;



    /**
    * Allowed values for the <code>processingStatus</code> property.
    * @enum {String}
    * @readonly
    */
    static ProcessingStatusEnum = {
        /**
         * value: "CANCELLED"
         * @const
         */
        "CANCELLED": "CANCELLED",
        /**
         * value: "DONE"
         * @const
         */
        "DONE": "DONE",
        /**
         * value: "FATAL"
         * @const
         */
        "FATAL": "FATAL",
        /**
         * value: "IN_PROGRESS"
         * @const
         */
        "IN_PROGRESS": "IN_PROGRESS",
        /**
         * value: "IN_QUEUE"
         * @const
         */
        "IN_QUEUE": "IN_QUEUE"    };

}
