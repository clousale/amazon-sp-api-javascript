/**
 * Selling Partner API for Finances
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Currency from './Currency';
import ModelDate from './ModelDate';

/**
* The FinancialEventGroup model module.
* @module client/models/FinancialEventGroup
* @version v0
*/
export default class FinancialEventGroup {
    /**
    * Constructs a new <code>FinancialEventGroup</code>.
    * Information related to a financial event group.
    * @alias module:client/models/FinancialEventGroup
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>FinancialEventGroup</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:client/models/FinancialEventGroup} obj Optional instance to populate.
    * @return {module:client/models/FinancialEventGroup} The populated <code>FinancialEventGroup</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FinancialEventGroup();
                        
            
            if (data.hasOwnProperty('FinancialEventGroupId')) {
                obj['FinancialEventGroupId'] = ApiClient.convertToType(data['FinancialEventGroupId'], 'String');
            }
            if (data.hasOwnProperty('ProcessingStatus')) {
                obj['ProcessingStatus'] = ApiClient.convertToType(data['ProcessingStatus'], 'String');
            }
            if (data.hasOwnProperty('FundTransferStatus')) {
                obj['FundTransferStatus'] = ApiClient.convertToType(data['FundTransferStatus'], 'String');
            }
            if (data.hasOwnProperty('OriginalTotal')) {
                obj['OriginalTotal'] = Currency.constructFromObject(data['OriginalTotal']);
            }
            if (data.hasOwnProperty('ConvertedTotal')) {
                obj['ConvertedTotal'] = Currency.constructFromObject(data['ConvertedTotal']);
            }
            if (data.hasOwnProperty('FundTransferDate')) {
                obj['FundTransferDate'] = ModelDate.constructFromObject(data['FundTransferDate']);
            }
            if (data.hasOwnProperty('TraceId')) {
                obj['TraceId'] = ApiClient.convertToType(data['TraceId'], 'String');
            }
            if (data.hasOwnProperty('AccountTail')) {
                obj['AccountTail'] = ApiClient.convertToType(data['AccountTail'], 'String');
            }
            if (data.hasOwnProperty('BeginningBalance')) {
                obj['BeginningBalance'] = Currency.constructFromObject(data['BeginningBalance']);
            }
            if (data.hasOwnProperty('FinancialEventGroupStart')) {
                obj['FinancialEventGroupStart'] = ModelDate.constructFromObject(data['FinancialEventGroupStart']);
            }
            if (data.hasOwnProperty('FinancialEventGroupEnd')) {
                obj['FinancialEventGroupEnd'] = ModelDate.constructFromObject(data['FinancialEventGroupEnd']);
            }
        }
        return obj;
    }

    /**
    * A unique identifier for the financial event group.
    * @member {String} FinancialEventGroupId
    */
    'FinancialEventGroupId' = undefined;
    /**
    * The processing status of the financial event group indicates whether the balance of the financial event group is settled.  Possible values:  * Open  * Closed
    * @member {String} ProcessingStatus
    */
    'ProcessingStatus' = undefined;
    /**
    * The status of the fund transfer.
    * @member {String} FundTransferStatus
    */
    'FundTransferStatus' = undefined;
    /**
    * @member {module:client/models/Currency} OriginalTotal
    */
    'OriginalTotal' = undefined;
    /**
    * @member {module:client/models/Currency} ConvertedTotal
    */
    'ConvertedTotal' = undefined;
    /**
    * @member {module:client/models/ModelDate} FundTransferDate
    */
    'FundTransferDate' = undefined;
    /**
    * The trace identifier used by sellers to look up transactions externally.
    * @member {String} TraceId
    */
    'TraceId' = undefined;
    /**
    * The account tail of the payment instrument.
    * @member {String} AccountTail
    */
    'AccountTail' = undefined;
    /**
    * @member {module:client/models/Currency} BeginningBalance
    */
    'BeginningBalance' = undefined;
    /**
    * @member {module:client/models/ModelDate} FinancialEventGroupStart
    */
    'FinancialEventGroupStart' = undefined;
    /**
    * @member {module:client/models/ModelDate} FinancialEventGroupEnd
    */
    'FinancialEventGroupEnd' = undefined;




}
