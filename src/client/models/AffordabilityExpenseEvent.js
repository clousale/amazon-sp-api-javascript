/**
 * Selling Partner API for Finances
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Currency from './Currency';
import ModelDate from './ModelDate';

/**
* The AffordabilityExpenseEvent model module.
* @module client/models/AffordabilityExpenseEvent
* @version v0
*/
export default class AffordabilityExpenseEvent {
    /**
    * Constructs a new <code>AffordabilityExpenseEvent</code>.
    * An expense related to an affordability promotion.
    * @alias module:client/models/AffordabilityExpenseEvent
    * @class
    * @param taxTypeCGST {module:client/models/Currency} 
    * @param taxTypeSGST {module:client/models/Currency} 
    * @param taxTypeIGST {module:client/models/Currency} 
    */

    constructor(taxTypeCGST, taxTypeSGST, taxTypeIGST) {
        
        
        this['TaxTypeCGST'] = taxTypeCGST;
        this['TaxTypeSGST'] = taxTypeSGST;
        this['TaxTypeIGST'] = taxTypeIGST;
        
    }

    /**
    * Constructs a <code>AffordabilityExpenseEvent</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:client/models/AffordabilityExpenseEvent} obj Optional instance to populate.
    * @return {module:client/models/AffordabilityExpenseEvent} The populated <code>AffordabilityExpenseEvent</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AffordabilityExpenseEvent();
                        
            
            if (data.hasOwnProperty('AmazonOrderId')) {
                obj['AmazonOrderId'] = ApiClient.convertToType(data['AmazonOrderId'], 'String');
            }
            if (data.hasOwnProperty('PostedDate')) {
                obj['PostedDate'] = ModelDate.constructFromObject(data['PostedDate']);
            }
            if (data.hasOwnProperty('MarketplaceId')) {
                obj['MarketplaceId'] = ApiClient.convertToType(data['MarketplaceId'], 'String');
            }
            if (data.hasOwnProperty('TransactionType')) {
                obj['TransactionType'] = ApiClient.convertToType(data['TransactionType'], 'String');
            }
            if (data.hasOwnProperty('BaseExpense')) {
                obj['BaseExpense'] = Currency.constructFromObject(data['BaseExpense']);
            }
            if (data.hasOwnProperty('TaxTypeCGST')) {
                obj['TaxTypeCGST'] = Currency.constructFromObject(data['TaxTypeCGST']);
            }
            if (data.hasOwnProperty('TaxTypeSGST')) {
                obj['TaxTypeSGST'] = Currency.constructFromObject(data['TaxTypeSGST']);
            }
            if (data.hasOwnProperty('TaxTypeIGST')) {
                obj['TaxTypeIGST'] = Currency.constructFromObject(data['TaxTypeIGST']);
            }
            if (data.hasOwnProperty('TotalExpense')) {
                obj['TotalExpense'] = Currency.constructFromObject(data['TotalExpense']);
            }
        }
        return obj;
    }

    /**
    * An Amazon-defined identifier for an order.
    * @member {String} AmazonOrderId
    */
    'AmazonOrderId' = undefined;
    /**
    * @member {module:client/models/ModelDate} PostedDate
    */
    'PostedDate' = undefined;
    /**
    * An encrypted, Amazon-defined marketplace identifier.
    * @member {String} MarketplaceId
    */
    'MarketplaceId' = undefined;
    /**
    * Indicates the type of transaction.   Possible values:  * Charge - For an affordability promotion expense.  * Refund - For an affordability promotion expense reversal.
    * @member {String} TransactionType
    */
    'TransactionType' = undefined;
    /**
    * @member {module:client/models/Currency} BaseExpense
    */
    'BaseExpense' = undefined;
    /**
    * @member {module:client/models/Currency} TaxTypeCGST
    */
    'TaxTypeCGST' = undefined;
    /**
    * @member {module:client/models/Currency} TaxTypeSGST
    */
    'TaxTypeSGST' = undefined;
    /**
    * @member {module:client/models/Currency} TaxTypeIGST
    */
    'TaxTypeIGST' = undefined;
    /**
    * @member {module:client/models/Currency} TotalExpense
    */
    'TotalExpense' = undefined;




}
