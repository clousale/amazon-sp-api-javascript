/**
 * Selling Partner API for Services
 * With the Services API, you can build applications that help service providers get and modify their service orders.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Appointment from './Appointment';
import AppointmentTime from './AppointmentTime';
import AssociatedItem from './AssociatedItem';
import Buyer from './Buyer';
import OrderId from './OrderId';
import ScopeOfWork from './ScopeOfWork';
import Seller from './Seller';
import ServiceJobId from './ServiceJobId';
import ServiceJobProvider from './ServiceJobProvider';
import ServiceLocation from './ServiceLocation';

/**
* The ServiceJob model module.
* @module client/models/ServiceJob
* @version v1
*/
export default class ServiceJob {
    /**
    * Constructs a new <code>ServiceJob</code>.
    * The job details of a service.
    * @alias module:client/models/ServiceJob
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>ServiceJob</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:client/models/ServiceJob} obj Optional instance to populate.
    * @return {module:client/models/ServiceJob} The populated <code>ServiceJob</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceJob();
                        
            
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'Date');
            }
            if (data.hasOwnProperty('serviceJobId')) {
                obj['serviceJobId'] = ServiceJobId.constructFromObject(data['serviceJobId']);
            }
            if (data.hasOwnProperty('serviceJobStatus')) {
                obj['serviceJobStatus'] = ApiClient.convertToType(data['serviceJobStatus'], 'String');
            }
            if (data.hasOwnProperty('scopeOfWork')) {
                obj['scopeOfWork'] = ScopeOfWork.constructFromObject(data['scopeOfWork']);
            }
            if (data.hasOwnProperty('seller')) {
                obj['seller'] = Seller.constructFromObject(data['seller']);
            }
            if (data.hasOwnProperty('serviceJobProvider')) {
                obj['serviceJobProvider'] = ServiceJobProvider.constructFromObject(data['serviceJobProvider']);
            }
            if (data.hasOwnProperty('preferredAppointmentTimes')) {
                obj['preferredAppointmentTimes'] = ApiClient.convertToType(data['preferredAppointmentTimes'], [AppointmentTime]);
            }
            if (data.hasOwnProperty('appointments')) {
                obj['appointments'] = ApiClient.convertToType(data['appointments'], [Appointment]);
            }
            if (data.hasOwnProperty('serviceOrderId')) {
                obj['serviceOrderId'] = OrderId.constructFromObject(data['serviceOrderId']);
            }
            if (data.hasOwnProperty('marketplaceId')) {
                obj['marketplaceId'] = ApiClient.convertToType(data['marketplaceId'], 'String');
            }
            if (data.hasOwnProperty('buyer')) {
                obj['buyer'] = Buyer.constructFromObject(data['buyer']);
            }
            if (data.hasOwnProperty('associatedItems')) {
                obj['associatedItems'] = ApiClient.convertToType(data['associatedItems'], [AssociatedItem]);
            }
            if (data.hasOwnProperty('serviceLocation')) {
                obj['serviceLocation'] = ServiceLocation.constructFromObject(data['serviceLocation']);
            }
        }
        return obj;
    }

    /**
    * The date and time of the creation of the job, in ISO 8601 format.
    * @member {Date} createTime
    */
    'createTime' = undefined;
    /**
    * @member {module:client/models/ServiceJobId} serviceJobId
    */
    'serviceJobId' = undefined;
    /**
    * The status of the service job.
    * @member {module:client/models/ServiceJob.ServiceJobStatusEnum} serviceJobStatus
    */
    'serviceJobStatus' = undefined;
    /**
    * @member {module:client/models/ScopeOfWork} scopeOfWork
    */
    'scopeOfWork' = undefined;
    /**
    * @member {module:client/models/Seller} seller
    */
    'seller' = undefined;
    /**
    * @member {module:client/models/ServiceJobProvider} serviceJobProvider
    */
    'serviceJobProvider' = undefined;
    /**
    * A list of appointment windows preferred by the buyer. Included only if the buyer selected appointment windows when creating the order.
    * @member {Array.<module:client/models/AppointmentTime>} preferredAppointmentTimes
    */
    'preferredAppointmentTimes' = undefined;
    /**
    * A list of appointments.
    * @member {Array.<module:client/models/Appointment>} appointments
    */
    'appointments' = undefined;
    /**
    * @member {module:client/models/OrderId} serviceOrderId
    */
    'serviceOrderId' = undefined;
    /**
    * The marketplace identifier.
    * @member {String} marketplaceId
    */
    'marketplaceId' = undefined;
    /**
    * @member {module:client/models/Buyer} buyer
    */
    'buyer' = undefined;
    /**
    * A list of items associated with the service job.
    * @member {Array.<module:client/models/AssociatedItem>} associatedItems
    */
    'associatedItems' = undefined;
    /**
    * @member {module:client/models/ServiceLocation} serviceLocation
    */
    'serviceLocation' = undefined;



    /**
    * Allowed values for the <code>serviceJobStatus</code> property.
    * @enum {String}
    * @readonly
    */
    static ServiceJobStatusEnum = {
        /**
         * value: "NOT_SERVICED"
         * @const
         */
        "NOT_SERVICED": "NOT_SERVICED",
        /**
         * value: "CANCELLED"
         * @const
         */
        "CANCELLED": "CANCELLED",
        /**
         * value: "COMPLETED"
         * @const
         */
        "COMPLETED": "COMPLETED",
        /**
         * value: "PENDING_SCHEDULE"
         * @const
         */
        "PENDING_SCHEDULE": "PENDING_SCHEDULE",
        /**
         * value: "NOT_FULFILLABLE"
         * @const
         */
        "NOT_FULFILLABLE": "NOT_FULFILLABLE",
        /**
         * value: "HOLD"
         * @const
         */
        "HOLD": "HOLD",
        /**
         * value: "PAYMENT_DECLINED"
         * @const
         */
        "PAYMENT_DECLINED": "PAYMENT_DECLINED"    };

}
