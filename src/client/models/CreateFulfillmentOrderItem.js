/**
 * Selling Partner API for Fulfillment Outbound
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Currency from './Currency';
import Quantity from './Quantity';

/**
* The CreateFulfillmentOrderItem model module.
* @module client/models/CreateFulfillmentOrderItem
* @version v0
*/
export default class CreateFulfillmentOrderItem {
    /**
    * Constructs a new <code>CreateFulfillmentOrderItem</code>.
    * Item information for creating a fulfillment order.
    * @alias module:client/models/CreateFulfillmentOrderItem
    * @class
    * @param sellerSKU {String} The seller SKU of the item.
    * @param sellerFulfillmentOrderItemId {String} A fulfillment order item identifier that the seller creates to track fulfillment order items. Used to disambiguate multiple fulfillment items that have the same seller SKU. For example, the seller might assign different SellerFulfillmentOrderItemId values to two items in a fulfillment order that share the same seller SKU but have different GiftMessage values.
    * @param quantity {module:client/models/Quantity} 
    */

    constructor(sellerSKU, sellerFulfillmentOrderItemId, quantity) {
        
        
        this['SellerSKU'] = sellerSKU;
        this['SellerFulfillmentOrderItemId'] = sellerFulfillmentOrderItemId;
        this['Quantity'] = quantity;
        
    }

    /**
    * Constructs a <code>CreateFulfillmentOrderItem</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:client/models/CreateFulfillmentOrderItem} obj Optional instance to populate.
    * @return {module:client/models/CreateFulfillmentOrderItem} The populated <code>CreateFulfillmentOrderItem</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateFulfillmentOrderItem();
                        
            
            if (data.hasOwnProperty('SellerSKU')) {
                obj['SellerSKU'] = ApiClient.convertToType(data['SellerSKU'], 'String');
            }
            if (data.hasOwnProperty('SellerFulfillmentOrderItemId')) {
                obj['SellerFulfillmentOrderItemId'] = ApiClient.convertToType(data['SellerFulfillmentOrderItemId'], 'String');
            }
            if (data.hasOwnProperty('Quantity')) {
                obj['Quantity'] = Quantity.constructFromObject(data['Quantity']);
            }
            if (data.hasOwnProperty('GiftMessage')) {
                obj['GiftMessage'] = ApiClient.convertToType(data['GiftMessage'], 'String');
            }
            if (data.hasOwnProperty('DisplayableComment')) {
                obj['DisplayableComment'] = ApiClient.convertToType(data['DisplayableComment'], 'String');
            }
            if (data.hasOwnProperty('FulfillmentNetworkSKU')) {
                obj['FulfillmentNetworkSKU'] = ApiClient.convertToType(data['FulfillmentNetworkSKU'], 'String');
            }
            if (data.hasOwnProperty('PerUnitDeclaredValue')) {
                obj['PerUnitDeclaredValue'] = Currency.constructFromObject(data['PerUnitDeclaredValue']);
            }
            if (data.hasOwnProperty('PerUnitPrice')) {
                obj['PerUnitPrice'] = Currency.constructFromObject(data['PerUnitPrice']);
            }
            if (data.hasOwnProperty('PerUnitTax')) {
                obj['PerUnitTax'] = Currency.constructFromObject(data['PerUnitTax']);
            }
        }
        return obj;
    }

    /**
    * The seller SKU of the item.
    * @member {String} SellerSKU
    */
    'SellerSKU' = undefined;
    /**
    * A fulfillment order item identifier that the seller creates to track fulfillment order items. Used to disambiguate multiple fulfillment items that have the same seller SKU. For example, the seller might assign different SellerFulfillmentOrderItemId values to two items in a fulfillment order that share the same seller SKU but have different GiftMessage values.
    * @member {String} SellerFulfillmentOrderItemId
    */
    'SellerFulfillmentOrderItemId' = undefined;
    /**
    * @member {module:client/models/Quantity} Quantity
    */
    'Quantity' = undefined;
    /**
    * A message to the gift recipient, if applicable.
    * @member {String} GiftMessage
    */
    'GiftMessage' = undefined;
    /**
    * Item-specific text that displays in recipient-facing materials such as the outbound shipment packing slip.
    * @member {String} DisplayableComment
    */
    'DisplayableComment' = undefined;
    /**
    * Amazon's fulfillment network SKU of the item.
    * @member {String} FulfillmentNetworkSKU
    */
    'FulfillmentNetworkSKU' = undefined;
    /**
    * @member {module:client/models/Currency} PerUnitDeclaredValue
    */
    'PerUnitDeclaredValue' = undefined;
    /**
    * @member {module:client/models/Currency} PerUnitPrice
    */
    'PerUnitPrice' = undefined;
    /**
    * @member {module:client/models/Currency} PerUnitTax
    */
    'PerUnitTax' = undefined;




}
