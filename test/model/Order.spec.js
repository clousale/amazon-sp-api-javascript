/**
 * Selling Partner API for Orders
 * The Selling Partner API for Orders helps you programmatically retrieve order information. These APIs let you develop fast, flexible, custom applications in areas like order synchronization, order research, and demand-based decision support tools.
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForOrders);
  }
}(this, function(expect, SellingPartnerApiForOrders) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SellingPartnerApiForOrders.Order();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Order', function() {
    it('should create an instance of Order', function() {
      // uncomment below and update the code to test Order
      //var instane = new SellingPartnerApiForOrders.Order();
      //expect(instance).to.be.a(SellingPartnerApiForOrders.Order);
    });

    it('should have the property amazonOrderId (base name: "AmazonOrderId")', function() {
      // uncomment below and update the code to test the property amazonOrderId
      //var instane = new SellingPartnerApiForOrders.Order();
      //expect(instance).to.be();
    });

    it('should have the property sellerOrderId (base name: "SellerOrderId")', function() {
      // uncomment below and update the code to test the property sellerOrderId
      //var instane = new SellingPartnerApiForOrders.Order();
      //expect(instance).to.be();
    });

    it('should have the property purchaseDate (base name: "PurchaseDate")', function() {
      // uncomment below and update the code to test the property purchaseDate
      //var instane = new SellingPartnerApiForOrders.Order();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdateDate (base name: "LastUpdateDate")', function() {
      // uncomment below and update the code to test the property lastUpdateDate
      //var instane = new SellingPartnerApiForOrders.Order();
      //expect(instance).to.be();
    });

    it('should have the property orderStatus (base name: "OrderStatus")', function() {
      // uncomment below and update the code to test the property orderStatus
      //var instane = new SellingPartnerApiForOrders.Order();
      //expect(instance).to.be();
    });

    it('should have the property fulfillmentChannel (base name: "FulfillmentChannel")', function() {
      // uncomment below and update the code to test the property fulfillmentChannel
      //var instane = new SellingPartnerApiForOrders.Order();
      //expect(instance).to.be();
    });

    it('should have the property salesChannel (base name: "SalesChannel")', function() {
      // uncomment below and update the code to test the property salesChannel
      //var instane = new SellingPartnerApiForOrders.Order();
      //expect(instance).to.be();
    });

    it('should have the property orderChannel (base name: "OrderChannel")', function() {
      // uncomment below and update the code to test the property orderChannel
      //var instane = new SellingPartnerApiForOrders.Order();
      //expect(instance).to.be();
    });

    it('should have the property shipServiceLevel (base name: "ShipServiceLevel")', function() {
      // uncomment below and update the code to test the property shipServiceLevel
      //var instane = new SellingPartnerApiForOrders.Order();
      //expect(instance).to.be();
    });

    it('should have the property orderTotal (base name: "OrderTotal")', function() {
      // uncomment below and update the code to test the property orderTotal
      //var instane = new SellingPartnerApiForOrders.Order();
      //expect(instance).to.be();
    });

    it('should have the property numberOfItemsShipped (base name: "NumberOfItemsShipped")', function() {
      // uncomment below and update the code to test the property numberOfItemsShipped
      //var instane = new SellingPartnerApiForOrders.Order();
      //expect(instance).to.be();
    });

    it('should have the property numberOfItemsUnshipped (base name: "NumberOfItemsUnshipped")', function() {
      // uncomment below and update the code to test the property numberOfItemsUnshipped
      //var instane = new SellingPartnerApiForOrders.Order();
      //expect(instance).to.be();
    });

    it('should have the property paymentExecutionDetail (base name: "PaymentExecutionDetail")', function() {
      // uncomment below and update the code to test the property paymentExecutionDetail
      //var instane = new SellingPartnerApiForOrders.Order();
      //expect(instance).to.be();
    });

    it('should have the property paymentMethod (base name: "PaymentMethod")', function() {
      // uncomment below and update the code to test the property paymentMethod
      //var instane = new SellingPartnerApiForOrders.Order();
      //expect(instance).to.be();
    });

    it('should have the property paymentMethodDetails (base name: "PaymentMethodDetails")', function() {
      // uncomment below and update the code to test the property paymentMethodDetails
      //var instane = new SellingPartnerApiForOrders.Order();
      //expect(instance).to.be();
    });

    it('should have the property marketplaceId (base name: "MarketplaceId")', function() {
      // uncomment below and update the code to test the property marketplaceId
      //var instane = new SellingPartnerApiForOrders.Order();
      //expect(instance).to.be();
    });

    it('should have the property shipmentServiceLevelCategory (base name: "ShipmentServiceLevelCategory")', function() {
      // uncomment below and update the code to test the property shipmentServiceLevelCategory
      //var instane = new SellingPartnerApiForOrders.Order();
      //expect(instance).to.be();
    });

    it('should have the property easyShipShipmentStatus (base name: "EasyShipShipmentStatus")', function() {
      // uncomment below and update the code to test the property easyShipShipmentStatus
      //var instane = new SellingPartnerApiForOrders.Order();
      //expect(instance).to.be();
    });

    it('should have the property cbaDisplayableShippingLabel (base name: "CbaDisplayableShippingLabel")', function() {
      // uncomment below and update the code to test the property cbaDisplayableShippingLabel
      //var instane = new SellingPartnerApiForOrders.Order();
      //expect(instance).to.be();
    });

    it('should have the property orderType (base name: "OrderType")', function() {
      // uncomment below and update the code to test the property orderType
      //var instane = new SellingPartnerApiForOrders.Order();
      //expect(instance).to.be();
    });

    it('should have the property earliestShipDate (base name: "EarliestShipDate")', function() {
      // uncomment below and update the code to test the property earliestShipDate
      //var instane = new SellingPartnerApiForOrders.Order();
      //expect(instance).to.be();
    });

    it('should have the property latestShipDate (base name: "LatestShipDate")', function() {
      // uncomment below and update the code to test the property latestShipDate
      //var instane = new SellingPartnerApiForOrders.Order();
      //expect(instance).to.be();
    });

    it('should have the property earliestDeliveryDate (base name: "EarliestDeliveryDate")', function() {
      // uncomment below and update the code to test the property earliestDeliveryDate
      //var instane = new SellingPartnerApiForOrders.Order();
      //expect(instance).to.be();
    });

    it('should have the property latestDeliveryDate (base name: "LatestDeliveryDate")', function() {
      // uncomment below and update the code to test the property latestDeliveryDate
      //var instane = new SellingPartnerApiForOrders.Order();
      //expect(instance).to.be();
    });

    it('should have the property isBusinessOrder (base name: "IsBusinessOrder")', function() {
      // uncomment below and update the code to test the property isBusinessOrder
      //var instane = new SellingPartnerApiForOrders.Order();
      //expect(instance).to.be();
    });

    it('should have the property isPrime (base name: "IsPrime")', function() {
      // uncomment below and update the code to test the property isPrime
      //var instane = new SellingPartnerApiForOrders.Order();
      //expect(instance).to.be();
    });

    it('should have the property isPremiumOrder (base name: "IsPremiumOrder")', function() {
      // uncomment below and update the code to test the property isPremiumOrder
      //var instane = new SellingPartnerApiForOrders.Order();
      //expect(instance).to.be();
    });

    it('should have the property isGlobalExpressEnabled (base name: "IsGlobalExpressEnabled")', function() {
      // uncomment below and update the code to test the property isGlobalExpressEnabled
      //var instane = new SellingPartnerApiForOrders.Order();
      //expect(instance).to.be();
    });

    it('should have the property replacedOrderId (base name: "ReplacedOrderId")', function() {
      // uncomment below and update the code to test the property replacedOrderId
      //var instane = new SellingPartnerApiForOrders.Order();
      //expect(instance).to.be();
    });

    it('should have the property isReplacementOrder (base name: "IsReplacementOrder")', function() {
      // uncomment below and update the code to test the property isReplacementOrder
      //var instane = new SellingPartnerApiForOrders.Order();
      //expect(instance).to.be();
    });

    it('should have the property promiseResponseDueDate (base name: "PromiseResponseDueDate")', function() {
      // uncomment below and update the code to test the property promiseResponseDueDate
      //var instane = new SellingPartnerApiForOrders.Order();
      //expect(instance).to.be();
    });

    it('should have the property isEstimatedShipDateSet (base name: "IsEstimatedShipDateSet")', function() {
      // uncomment below and update the code to test the property isEstimatedShipDateSet
      //var instane = new SellingPartnerApiForOrders.Order();
      //expect(instance).to.be();
    });

    it('should have the property isSoldByAB (base name: "IsSoldByAB")', function() {
      // uncomment below and update the code to test the property isSoldByAB
      //var instane = new SellingPartnerApiForOrders.Order();
      //expect(instance).to.be();
    });

    it('should have the property assignedShipFromLocationAddress (base name: "AssignedShipFromLocationAddress")', function() {
      // uncomment below and update the code to test the property assignedShipFromLocationAddress
      //var instane = new SellingPartnerApiForOrders.Order();
      //expect(instance).to.be();
    });

    it('should have the property fulfillmentInstruction (base name: "FulfillmentInstruction")', function() {
      // uncomment below and update the code to test the property fulfillmentInstruction
      //var instane = new SellingPartnerApiForOrders.Order();
      //expect(instance).to.be();
    });

  });

}));
