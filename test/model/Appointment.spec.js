/**
 * Selling Partner API for Services
 * With the Services API, you can build applications that help service providers get and modify their service orders.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForServices);
  }
}(this, function(expect, SellingPartnerApiForServices) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SellingPartnerApiForServices.Appointment();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Appointment', function() {
    it('should create an instance of Appointment', function() {
      // uncomment below and update the code to test Appointment
      //var instane = new SellingPartnerApiForServices.Appointment();
      //expect(instance).to.be.a(SellingPartnerApiForServices.Appointment);
    });

    it('should have the property appointmentId (base name: "appointmentId")', function() {
      // uncomment below and update the code to test the property appointmentId
      //var instane = new SellingPartnerApiForServices.Appointment();
      //expect(instance).to.be();
    });

    it('should have the property appointmentStatus (base name: "appointmentStatus")', function() {
      // uncomment below and update the code to test the property appointmentStatus
      //var instane = new SellingPartnerApiForServices.Appointment();
      //expect(instance).to.be();
    });

    it('should have the property appointmentTime (base name: "appointmentTime")', function() {
      // uncomment below and update the code to test the property appointmentTime
      //var instane = new SellingPartnerApiForServices.Appointment();
      //expect(instance).to.be();
    });

    it('should have the property assignedTechnicians (base name: "assignedTechnicians")', function() {
      // uncomment below and update the code to test the property assignedTechnicians
      //var instane = new SellingPartnerApiForServices.Appointment();
      //expect(instance).to.be();
    });

    it('should have the property rescheduledAppointmentId (base name: "rescheduledAppointmentId")', function() {
      // uncomment below and update the code to test the property rescheduledAppointmentId
      //var instane = new SellingPartnerApiForServices.Appointment();
      //expect(instance).to.be();
    });

    it('should have the property poa (base name: "poa")', function() {
      // uncomment below and update the code to test the property poa
      //var instane = new SellingPartnerApiForServices.Appointment();
      //expect(instance).to.be();
    });

  });

}));
