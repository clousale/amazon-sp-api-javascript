/**
 * Selling Partner API for Merchant Fulfillment
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForMerchantFulfillment);
  }
}(this, function(expect, SellingPartnerApiForMerchantFulfillment) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SellingPartnerApiForMerchantFulfillment.ShippingService();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ShippingService', function() {
    it('should create an instance of ShippingService', function() {
      // uncomment below and update the code to test ShippingService
      //var instane = new SellingPartnerApiForMerchantFulfillment.ShippingService();
      //expect(instance).to.be.a(SellingPartnerApiForMerchantFulfillment.ShippingService);
    });

    it('should have the property shippingServiceName (base name: "ShippingServiceName")', function() {
      // uncomment below and update the code to test the property shippingServiceName
      //var instane = new SellingPartnerApiForMerchantFulfillment.ShippingService();
      //expect(instance).to.be();
    });

    it('should have the property carrierName (base name: "CarrierName")', function() {
      // uncomment below and update the code to test the property carrierName
      //var instane = new SellingPartnerApiForMerchantFulfillment.ShippingService();
      //expect(instance).to.be();
    });

    it('should have the property shippingServiceId (base name: "ShippingServiceId")', function() {
      // uncomment below and update the code to test the property shippingServiceId
      //var instane = new SellingPartnerApiForMerchantFulfillment.ShippingService();
      //expect(instance).to.be();
    });

    it('should have the property shippingServiceOfferId (base name: "ShippingServiceOfferId")', function() {
      // uncomment below and update the code to test the property shippingServiceOfferId
      //var instane = new SellingPartnerApiForMerchantFulfillment.ShippingService();
      //expect(instance).to.be();
    });

    it('should have the property shipDate (base name: "ShipDate")', function() {
      // uncomment below and update the code to test the property shipDate
      //var instane = new SellingPartnerApiForMerchantFulfillment.ShippingService();
      //expect(instance).to.be();
    });

    it('should have the property earliestEstimatedDeliveryDate (base name: "EarliestEstimatedDeliveryDate")', function() {
      // uncomment below and update the code to test the property earliestEstimatedDeliveryDate
      //var instane = new SellingPartnerApiForMerchantFulfillment.ShippingService();
      //expect(instance).to.be();
    });

    it('should have the property latestEstimatedDeliveryDate (base name: "LatestEstimatedDeliveryDate")', function() {
      // uncomment below and update the code to test the property latestEstimatedDeliveryDate
      //var instane = new SellingPartnerApiForMerchantFulfillment.ShippingService();
      //expect(instance).to.be();
    });

    it('should have the property rate (base name: "Rate")', function() {
      // uncomment below and update the code to test the property rate
      //var instane = new SellingPartnerApiForMerchantFulfillment.ShippingService();
      //expect(instance).to.be();
    });

    it('should have the property shippingServiceOptions (base name: "ShippingServiceOptions")', function() {
      // uncomment below and update the code to test the property shippingServiceOptions
      //var instane = new SellingPartnerApiForMerchantFulfillment.ShippingService();
      //expect(instance).to.be();
    });

    it('should have the property availableShippingServiceOptions (base name: "AvailableShippingServiceOptions")', function() {
      // uncomment below and update the code to test the property availableShippingServiceOptions
      //var instane = new SellingPartnerApiForMerchantFulfillment.ShippingService();
      //expect(instance).to.be();
    });

    it('should have the property availableLabelFormats (base name: "AvailableLabelFormats")', function() {
      // uncomment below and update the code to test the property availableLabelFormats
      //var instane = new SellingPartnerApiForMerchantFulfillment.ShippingService();
      //expect(instance).to.be();
    });

    it('should have the property availableFormatOptionsForLabel (base name: "AvailableFormatOptionsForLabel")', function() {
      // uncomment below and update the code to test the property availableFormatOptionsForLabel
      //var instane = new SellingPartnerApiForMerchantFulfillment.ShippingService();
      //expect(instance).to.be();
    });

    it('should have the property requiresAdditionalSellerInputs (base name: "RequiresAdditionalSellerInputs")', function() {
      // uncomment below and update the code to test the property requiresAdditionalSellerInputs
      //var instane = new SellingPartnerApiForMerchantFulfillment.ShippingService();
      //expect(instance).to.be();
    });

  });

}));
