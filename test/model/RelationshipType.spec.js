/**
 * Selling Partner API for Catalog Items
 * The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForCatalogItems);
  }
}(this, function(expect, SellingPartnerApiForCatalogItems) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SellingPartnerApiForCatalogItems.RelationshipType();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('RelationshipType', function() {
    it('should create an instance of RelationshipType', function() {
      // uncomment below and update the code to test RelationshipType
      //var instane = new SellingPartnerApiForCatalogItems.RelationshipType();
      //expect(instance).to.be.a(SellingPartnerApiForCatalogItems.RelationshipType);
    });

    it('should have the property color (base name: "Color")', function() {
      // uncomment below and update the code to test the property color
      //var instane = new SellingPartnerApiForCatalogItems.RelationshipType();
      //expect(instance).to.be();
    });

    it('should have the property edition (base name: "Edition")', function() {
      // uncomment below and update the code to test the property edition
      //var instane = new SellingPartnerApiForCatalogItems.RelationshipType();
      //expect(instance).to.be();
    });

    it('should have the property flavor (base name: "Flavor")', function() {
      // uncomment below and update the code to test the property flavor
      //var instane = new SellingPartnerApiForCatalogItems.RelationshipType();
      //expect(instance).to.be();
    });

    it('should have the property gemType (base name: "GemType")', function() {
      // uncomment below and update the code to test the property gemType
      //var instane = new SellingPartnerApiForCatalogItems.RelationshipType();
      //expect(instance).to.be();
    });

    it('should have the property golfClubFlex (base name: "GolfClubFlex")', function() {
      // uncomment below and update the code to test the property golfClubFlex
      //var instane = new SellingPartnerApiForCatalogItems.RelationshipType();
      //expect(instance).to.be();
    });

    it('should have the property handOrientation (base name: "HandOrientation")', function() {
      // uncomment below and update the code to test the property handOrientation
      //var instane = new SellingPartnerApiForCatalogItems.RelationshipType();
      //expect(instance).to.be();
    });

    it('should have the property hardwarePlatform (base name: "HardwarePlatform")', function() {
      // uncomment below and update the code to test the property hardwarePlatform
      //var instane = new SellingPartnerApiForCatalogItems.RelationshipType();
      //expect(instance).to.be();
    });

    it('should have the property materialType (base name: "MaterialType")', function() {
      // uncomment below and update the code to test the property materialType
      //var instane = new SellingPartnerApiForCatalogItems.RelationshipType();
      //expect(instance).to.be();
    });

    it('should have the property metalType (base name: "MetalType")', function() {
      // uncomment below and update the code to test the property metalType
      //var instane = new SellingPartnerApiForCatalogItems.RelationshipType();
      //expect(instance).to.be();
    });

    it('should have the property model (base name: "Model")', function() {
      // uncomment below and update the code to test the property model
      //var instane = new SellingPartnerApiForCatalogItems.RelationshipType();
      //expect(instance).to.be();
    });

    it('should have the property operatingSystem (base name: "OperatingSystem")', function() {
      // uncomment below and update the code to test the property operatingSystem
      //var instane = new SellingPartnerApiForCatalogItems.RelationshipType();
      //expect(instance).to.be();
    });

    it('should have the property productTypeSubcategory (base name: "ProductTypeSubcategory")', function() {
      // uncomment below and update the code to test the property productTypeSubcategory
      //var instane = new SellingPartnerApiForCatalogItems.RelationshipType();
      //expect(instance).to.be();
    });

    it('should have the property ringSize (base name: "RingSize")', function() {
      // uncomment below and update the code to test the property ringSize
      //var instane = new SellingPartnerApiForCatalogItems.RelationshipType();
      //expect(instance).to.be();
    });

    it('should have the property shaftMaterial (base name: "ShaftMaterial")', function() {
      // uncomment below and update the code to test the property shaftMaterial
      //var instane = new SellingPartnerApiForCatalogItems.RelationshipType();
      //expect(instance).to.be();
    });

    it('should have the property scent (base name: "Scent")', function() {
      // uncomment below and update the code to test the property scent
      //var instane = new SellingPartnerApiForCatalogItems.RelationshipType();
      //expect(instance).to.be();
    });

    it('should have the property size (base name: "Size")', function() {
      // uncomment below and update the code to test the property size
      //var instane = new SellingPartnerApiForCatalogItems.RelationshipType();
      //expect(instance).to.be();
    });

    it('should have the property sizePerPearl (base name: "SizePerPearl")', function() {
      // uncomment below and update the code to test the property sizePerPearl
      //var instane = new SellingPartnerApiForCatalogItems.RelationshipType();
      //expect(instance).to.be();
    });

    it('should have the property golfClubLoft (base name: "GolfClubLoft")', function() {
      // uncomment below and update the code to test the property golfClubLoft
      //var instane = new SellingPartnerApiForCatalogItems.RelationshipType();
      //expect(instance).to.be();
    });

    it('should have the property totalDiamondWeight (base name: "TotalDiamondWeight")', function() {
      // uncomment below and update the code to test the property totalDiamondWeight
      //var instane = new SellingPartnerApiForCatalogItems.RelationshipType();
      //expect(instance).to.be();
    });

    it('should have the property totalGemWeight (base name: "TotalGemWeight")', function() {
      // uncomment below and update the code to test the property totalGemWeight
      //var instane = new SellingPartnerApiForCatalogItems.RelationshipType();
      //expect(instance).to.be();
    });

    it('should have the property packageQuantity (base name: "PackageQuantity")', function() {
      // uncomment below and update the code to test the property packageQuantity
      //var instane = new SellingPartnerApiForCatalogItems.RelationshipType();
      //expect(instance).to.be();
    });

    it('should have the property itemDimensions (base name: "ItemDimensions")', function() {
      // uncomment below and update the code to test the property itemDimensions
      //var instane = new SellingPartnerApiForCatalogItems.RelationshipType();
      //expect(instance).to.be();
    });

  });

}));
