/**
 * Selling Partner API for Catalog Items
 * The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForCatalogItems);
  }
}(this, function(expect, SellingPartnerApiForCatalogItems) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SellingPartnerApiForCatalogItems.AttributeSetListType();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AttributeSetListType', function() {
    it('should create an instance of AttributeSetListType', function() {
      // uncomment below and update the code to test AttributeSetListType
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be.a(SellingPartnerApiForCatalogItems.AttributeSetListType);
    });

    it('should have the property actor (base name: "Actor")', function() {
      // uncomment below and update the code to test the property actor
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property artist (base name: "Artist")', function() {
      // uncomment below and update the code to test the property artist
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property aspectRatio (base name: "AspectRatio")', function() {
      // uncomment below and update the code to test the property aspectRatio
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property audienceRating (base name: "AudienceRating")', function() {
      // uncomment below and update the code to test the property audienceRating
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property author (base name: "Author")', function() {
      // uncomment below and update the code to test the property author
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property backFinding (base name: "BackFinding")', function() {
      // uncomment below and update the code to test the property backFinding
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property bandMaterialType (base name: "BandMaterialType")', function() {
      // uncomment below and update the code to test the property bandMaterialType
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property binding (base name: "Binding")', function() {
      // uncomment below and update the code to test the property binding
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property blurayRegion (base name: "BlurayRegion")', function() {
      // uncomment below and update the code to test the property blurayRegion
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property brand (base name: "Brand")', function() {
      // uncomment below and update the code to test the property brand
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property ceroAgeRating (base name: "CeroAgeRating")', function() {
      // uncomment below and update the code to test the property ceroAgeRating
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property chainType (base name: "ChainType")', function() {
      // uncomment below and update the code to test the property chainType
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property claspType (base name: "ClaspType")', function() {
      // uncomment below and update the code to test the property claspType
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property color (base name: "Color")', function() {
      // uncomment below and update the code to test the property color
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property cpuManufacturer (base name: "CpuManufacturer")', function() {
      // uncomment below and update the code to test the property cpuManufacturer
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property cpuSpeed (base name: "CpuSpeed")', function() {
      // uncomment below and update the code to test the property cpuSpeed
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property cpuType (base name: "CpuType")', function() {
      // uncomment below and update the code to test the property cpuType
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property creator (base name: "Creator")', function() {
      // uncomment below and update the code to test the property creator
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property department (base name: "Department")', function() {
      // uncomment below and update the code to test the property department
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property director (base name: "Director")', function() {
      // uncomment below and update the code to test the property director
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property displaySize (base name: "DisplaySize")', function() {
      // uncomment below and update the code to test the property displaySize
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property edition (base name: "Edition")', function() {
      // uncomment below and update the code to test the property edition
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property episodeSequence (base name: "EpisodeSequence")', function() {
      // uncomment below and update the code to test the property episodeSequence
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property esrbAgeRating (base name: "EsrbAgeRating")', function() {
      // uncomment below and update the code to test the property esrbAgeRating
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property feature (base name: "Feature")', function() {
      // uncomment below and update the code to test the property feature
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property flavor (base name: "Flavor")', function() {
      // uncomment below and update the code to test the property flavor
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property format (base name: "Format")', function() {
      // uncomment below and update the code to test the property format
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property gemType (base name: "GemType")', function() {
      // uncomment below and update the code to test the property gemType
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property genre (base name: "Genre")', function() {
      // uncomment below and update the code to test the property genre
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property golfClubFlex (base name: "GolfClubFlex")', function() {
      // uncomment below and update the code to test the property golfClubFlex
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property golfClubLoft (base name: "GolfClubLoft")', function() {
      // uncomment below and update the code to test the property golfClubLoft
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property handOrientation (base name: "HandOrientation")', function() {
      // uncomment below and update the code to test the property handOrientation
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property hardDiskInterface (base name: "HardDiskInterface")', function() {
      // uncomment below and update the code to test the property hardDiskInterface
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property hardDiskSize (base name: "HardDiskSize")', function() {
      // uncomment below and update the code to test the property hardDiskSize
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property hardwarePlatform (base name: "HardwarePlatform")', function() {
      // uncomment below and update the code to test the property hardwarePlatform
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property hazardousMaterialType (base name: "HazardousMaterialType")', function() {
      // uncomment below and update the code to test the property hazardousMaterialType
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property itemDimensions (base name: "ItemDimensions")', function() {
      // uncomment below and update the code to test the property itemDimensions
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property isAdultProduct (base name: "IsAdultProduct")', function() {
      // uncomment below and update the code to test the property isAdultProduct
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property isAutographed (base name: "IsAutographed")', function() {
      // uncomment below and update the code to test the property isAutographed
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property isEligibleForTradeIn (base name: "IsEligibleForTradeIn")', function() {
      // uncomment below and update the code to test the property isEligibleForTradeIn
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property isMemorabilia (base name: "IsMemorabilia")', function() {
      // uncomment below and update the code to test the property isMemorabilia
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property issuesPerYear (base name: "IssuesPerYear")', function() {
      // uncomment below and update the code to test the property issuesPerYear
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property itemPartNumber (base name: "ItemPartNumber")', function() {
      // uncomment below and update the code to test the property itemPartNumber
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property label (base name: "Label")', function() {
      // uncomment below and update the code to test the property label
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property languages (base name: "Languages")', function() {
      // uncomment below and update the code to test the property languages
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property legalDisclaimer (base name: "LegalDisclaimer")', function() {
      // uncomment below and update the code to test the property legalDisclaimer
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property listPrice (base name: "ListPrice")', function() {
      // uncomment below and update the code to test the property listPrice
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property manufacturer (base name: "Manufacturer")', function() {
      // uncomment below and update the code to test the property manufacturer
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property manufacturerMaximumAge (base name: "ManufacturerMaximumAge")', function() {
      // uncomment below and update the code to test the property manufacturerMaximumAge
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property manufacturerMinimumAge (base name: "ManufacturerMinimumAge")', function() {
      // uncomment below and update the code to test the property manufacturerMinimumAge
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property manufacturerPartsWarrantyDescription (base name: "ManufacturerPartsWarrantyDescription")', function() {
      // uncomment below and update the code to test the property manufacturerPartsWarrantyDescription
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property materialType (base name: "MaterialType")', function() {
      // uncomment below and update the code to test the property materialType
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property maximumResolution (base name: "MaximumResolution")', function() {
      // uncomment below and update the code to test the property maximumResolution
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property mediaType (base name: "MediaType")', function() {
      // uncomment below and update the code to test the property mediaType
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property metalStamp (base name: "MetalStamp")', function() {
      // uncomment below and update the code to test the property metalStamp
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property metalType (base name: "MetalType")', function() {
      // uncomment below and update the code to test the property metalType
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property model (base name: "Model")', function() {
      // uncomment below and update the code to test the property model
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property numberOfDiscs (base name: "NumberOfDiscs")', function() {
      // uncomment below and update the code to test the property numberOfDiscs
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property numberOfIssues (base name: "NumberOfIssues")', function() {
      // uncomment below and update the code to test the property numberOfIssues
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property numberOfItems (base name: "NumberOfItems")', function() {
      // uncomment below and update the code to test the property numberOfItems
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property numberOfPages (base name: "NumberOfPages")', function() {
      // uncomment below and update the code to test the property numberOfPages
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property numberOfTracks (base name: "NumberOfTracks")', function() {
      // uncomment below and update the code to test the property numberOfTracks
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property operatingSystem (base name: "OperatingSystem")', function() {
      // uncomment below and update the code to test the property operatingSystem
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property opticalZoom (base name: "OpticalZoom")', function() {
      // uncomment below and update the code to test the property opticalZoom
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property packageDimensions (base name: "PackageDimensions")', function() {
      // uncomment below and update the code to test the property packageDimensions
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property packageQuantity (base name: "PackageQuantity")', function() {
      // uncomment below and update the code to test the property packageQuantity
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property partNumber (base name: "PartNumber")', function() {
      // uncomment below and update the code to test the property partNumber
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property pegiRating (base name: "PegiRating")', function() {
      // uncomment below and update the code to test the property pegiRating
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property platform (base name: "Platform")', function() {
      // uncomment below and update the code to test the property platform
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property processorCount (base name: "ProcessorCount")', function() {
      // uncomment below and update the code to test the property processorCount
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property productGroup (base name: "ProductGroup")', function() {
      // uncomment below and update the code to test the property productGroup
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property productTypeName (base name: "ProductTypeName")', function() {
      // uncomment below and update the code to test the property productTypeName
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property productTypeSubcategory (base name: "ProductTypeSubcategory")', function() {
      // uncomment below and update the code to test the property productTypeSubcategory
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property publicationDate (base name: "PublicationDate")', function() {
      // uncomment below and update the code to test the property publicationDate
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property publisher (base name: "Publisher")', function() {
      // uncomment below and update the code to test the property publisher
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property regionCode (base name: "RegionCode")', function() {
      // uncomment below and update the code to test the property regionCode
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property releaseDate (base name: "ReleaseDate")', function() {
      // uncomment below and update the code to test the property releaseDate
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property ringSize (base name: "RingSize")', function() {
      // uncomment below and update the code to test the property ringSize
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property runningTime (base name: "RunningTime")', function() {
      // uncomment below and update the code to test the property runningTime
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property shaftMaterial (base name: "ShaftMaterial")', function() {
      // uncomment below and update the code to test the property shaftMaterial
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property scent (base name: "Scent")', function() {
      // uncomment below and update the code to test the property scent
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property seasonSequence (base name: "SeasonSequence")', function() {
      // uncomment below and update the code to test the property seasonSequence
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property seikodoProductCode (base name: "SeikodoProductCode")', function() {
      // uncomment below and update the code to test the property seikodoProductCode
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property size (base name: "Size")', function() {
      // uncomment below and update the code to test the property size
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property sizePerPearl (base name: "SizePerPearl")', function() {
      // uncomment below and update the code to test the property sizePerPearl
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property smallImage (base name: "SmallImage")', function() {
      // uncomment below and update the code to test the property smallImage
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property studio (base name: "Studio")', function() {
      // uncomment below and update the code to test the property studio
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property subscriptionLength (base name: "SubscriptionLength")', function() {
      // uncomment below and update the code to test the property subscriptionLength
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property systemMemorySize (base name: "SystemMemorySize")', function() {
      // uncomment below and update the code to test the property systemMemorySize
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property systemMemoryType (base name: "SystemMemoryType")', function() {
      // uncomment below and update the code to test the property systemMemoryType
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property theatricalReleaseDate (base name: "TheatricalReleaseDate")', function() {
      // uncomment below and update the code to test the property theatricalReleaseDate
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "Title")', function() {
      // uncomment below and update the code to test the property title
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property totalDiamondWeight (base name: "TotalDiamondWeight")', function() {
      // uncomment below and update the code to test the property totalDiamondWeight
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property totalGemWeight (base name: "TotalGemWeight")', function() {
      // uncomment below and update the code to test the property totalGemWeight
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property warranty (base name: "Warranty")', function() {
      // uncomment below and update the code to test the property warranty
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

    it('should have the property weeeTaxValue (base name: "WeeeTaxValue")', function() {
      // uncomment below and update the code to test the property weeeTaxValue
      //var instane = new SellingPartnerApiForCatalogItems.AttributeSetListType();
      //expect(instance).to.be();
    });

  });

}));
