/**
 * Selling Partner API for Sellers
 * The Selling Partner API for Sellers lets you retrieve information on behalf of sellers about their seller account, such as the marketplaces they participate in. Along with listing the marketplaces that a seller can sell in, the API also provides additional information about the marketplace such as the default language and the default currency. The API also provides seller-specific information such as whether the seller has suspended listings in that marketplace.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForSellers);
  }
}(this, function(expect, SellingPartnerApiForSellers) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SellingPartnerApiForSellers.Marketplace();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Marketplace', function() {
    it('should create an instance of Marketplace', function() {
      // uncomment below and update the code to test Marketplace
      //var instane = new SellingPartnerApiForSellers.Marketplace();
      //expect(instance).to.be.a(SellingPartnerApiForSellers.Marketplace);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new SellingPartnerApiForSellers.Marketplace();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new SellingPartnerApiForSellers.Marketplace();
      //expect(instance).to.be();
    });

    it('should have the property countryCode (base name: "countryCode")', function() {
      // uncomment below and update the code to test the property countryCode
      //var instane = new SellingPartnerApiForSellers.Marketplace();
      //expect(instance).to.be();
    });

    it('should have the property defaultCurrencyCode (base name: "defaultCurrencyCode")', function() {
      // uncomment below and update the code to test the property defaultCurrencyCode
      //var instane = new SellingPartnerApiForSellers.Marketplace();
      //expect(instance).to.be();
    });

    it('should have the property defaultLanguageCode (base name: "defaultLanguageCode")', function() {
      // uncomment below and update the code to test the property defaultLanguageCode
      //var instane = new SellingPartnerApiForSellers.Marketplace();
      //expect(instance).to.be();
    });

    it('should have the property domainName (base name: "domainName")', function() {
      // uncomment below and update the code to test the property domainName
      //var instane = new SellingPartnerApiForSellers.Marketplace();
      //expect(instance).to.be();
    });

  });

}));
